Типовые практические сценарии использования прототипов (в явном виде):

1. Создание конструктора с методами через прототип
Классическая замена классов: function Car() {...} → Car.prototype.drive = ...

Часто в библиотеках, старом коде, кастомных структурах.

2. Расширение прототипов встроенных объектов
Array.prototype.customMap = function() { this. ... }

В реальной жизни: создание удобных методов (но аккуратно — можно поломать что-то).

3. Переопределение (или патчинг) стандартных методов
Monkey patching. Например, временно переопределить console.log или Array.prototype.push для логирования.

4. Создание "классовоподобных" систем без ES6-классов
В старом коде или при написании кода, совместимого с ES5.

5. Инспекция цепочки прототипов
Например, при дебаге: obj.__proto__, Object.getPrototypeOf, instanceof

Разбор, почему объект имеет доступ к определённым методам.

6. Object.create — создание объекта с заданным прототипом
Часто применяется в библиотеках, фреймворках.

Или для создания объектов без лишнего наследования (Object.create(null)).

7. Переиспользование логики между "классами" без классов
Наследование от другого конструктора через Child.prototype = Object.create(Parent.prototype).
